---
title: "Météo Montpeul"
jupyter: python3
---

Voici la météo à Montpellier pour aujourd'hui et les 4 prochains jours :

```{python}
#| echo: false
import datetime
import pandas as pd
import matplotlib.pyplot as plt
import requests
from PIL import Image
import json
import urllib

# --- Dates ---
aujourd_hui = datetime.date.today()
J_plus_4 = aujourd_hui + datetime.timedelta(days=4)

# --- Téléchargement des données météo ---
url_daily = (
    f"https://api.open-meteo.com/v1/meteofrance?"
    f"latitude=43.6109&longitude=3.8763&"
    f"daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum,"
    f"windspeed_10m_max,winddirection_10m_dominant&"
    f"timezone=GMT&start_date={aujourd_hui}&end_date={J_plus_4}&format=csv"
)
url_hourly = (
    f"https://api.open-meteo.com/v1/meteofrance?"
    f"latitude=43.6109&longitude=3.8763&"
    f"hourly=windspeed_10m&start_date={aujourd_hui}&end_date={J_plus_4}&format=csv"
)

# Téléchargement avec timeout
r_daily = requests.get(url_daily, timeout=30)
with open("./data/db.csv", "wb") as f:
    f.write(r_daily.content)

r_hourly = requests.get(url_hourly, timeout=30)
with open("./data/db1.csv", "wb") as f:
    f.write(r_hourly.content)

# --- Lecture des CSV ---
df = pd.read_csv("./data/db.csv", skiprows=3).fillna("-")
df1 = pd.read_csv("./data/db1.csv", skiprows=3)
df1.rename(columns={"windspeed_10m (km/h)": "vent"}, inplace=True)

# Renommer les colonnes pour plus de clarté
df.rename(columns={
    "weathercode (wmo code)": "code",
    "temperature_2m_max (°C)": "tmax",
    "temperature_2m_min (°C)": "tmin",
    "precipitation_sum (mm)": "pluie",
    "windspeed_10m_max (km/h)": "vent"
}, inplace=True)

pluie = df['pluie'].tolist()

# Ajouter unités
for col, unit in zip(['tmax','tmin','pluie','vent'], ['°C','°C','mm','km/h']):
    df[col] = df[col].astype(str) + f' {unit}'

# Transpose pour faciliter l'affichage
df = df.T

# Calcul du vent moyen
for i in range(5):
    subset = df1.iloc[24*i:24*(i+1)]
    moyenne = subset['vent'].mean()
    df.iloc[5,i] = f"{round(moyenne,1)} km/h"

# --- Création du tableau matplotlib ---
fig = plt.figure(figsize=(14,10), dpi=300)
ax = fig.add_subplot()
ncols, nrows = df.shape[1], df.shape[0] - 1
ax.set_xlim(0, ncols + 1)
ax.set_ylim(0, nrows)
ax.axis('off')

# --- Dates formatées ---
noms_jours = ["lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche"]
noms_mois = ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août",
             "septembre", "octobre", "novembre", "décembre"]

for i in range(ncols):
    date = datetime.datetime.strptime(df.iloc[0,i], "%Y-%m-%d")
    df.iloc[0,i] = f"{noms_jours[date.weekday()]}\n{date.day}\n{noms_mois[date.month-1]}"

# --- Affichage des textes ---
columns = df.iloc[0].tolist()

for i in range(ncols):
    ax.annotate(df.iloc[0,i], xy=(i+1, nrows-0.7), ha='center', va='bottom', weight='bold', fontsize=15)

for j in range(ncols):
    ax.annotate(df.iloc[2,j], xy=(j+1, nrows-2), ha='center', va='center',
                weight='bold', fontsize=12, bbox=dict(boxstyle="round4", pad=0.8, fc="indianred"))
    ax.annotate(df.iloc[3,j], xy=(j+1, nrows-3), ha='center', va='center',
                weight='bold', fontsize=12, bbox=dict(boxstyle="round4", pad=0.8, fc="lightblue"))

# Autres valeurs
for i in range(4, nrows):
    for j in range(ncols):
        ax.annotate(df.iloc[i,j], xy=(j+1, nrows-i), ha='center', va='center', weight='bold', fontsize=12)

# Lignes de séparation
ax.plot([0.5, 5.5], [nrows, nrows], lw=6, color='black')
ax.plot([0.5, 5.5], [0.5, 0.5], lw=6, color='black')
for x in range(1, nrows-1):
    ax.plot([0.5, 5.5], [x+0.5, x+0.5], lw=1.15, color='gray', ls=':')

# --- Chargement icônes météo ---
with open("./data/ic.json", "r") as f:
    df_ic = json.load(f)

def image_code(code, ax):
    """Affiche l'image météo correspondant au code WMO."""
    try:
        if code == "-" or pd.isna(code):
            ax.axis('off')
            return ax
        code_int = int(float(code))
        url = df_ic[str(code_int)]['day']['image']
        image = Image.open(urllib.request.urlopen(url))
        ax.imshow(image)
        ax.axis('off')
    except (ValueError, KeyError, urllib.error.URLError):
        ax.axis('off')
    return ax

# --- Transformation coordonnées pour axes images ---
DC_to_FC = ax.transData.transform
FC_to_NFC = fig.transFigure.inverted().transform
DC_to_NFC = lambda x: FC_to_NFC(DC_to_FC(x))

# Ajout images météo
ax_width = abs(DC_to_NFC([0.25,0.25])[0] - DC_to_NFC([0.75,0.75])[0])*2
ax_height = abs(DC_to_NFC([0.25,0.25])[1] - DC_to_NFC([0.75,0.75])[1])*2

for i in range(ncols):
    ax_coords = DC_to_NFC([i + 0.5, 4.4])
    ico_ax = fig.add_axes([ax_coords[0], ax_coords[1], ax_width, ax_height])
    image_code(df.iloc[1,i], ico_ax)

# --- Gouttes d'eau ---
gt_width = abs(DC_to_NFC([0.25,0.25])[0] - DC_to_NFC([0.5,0.5])[0])
gt_height = abs(DC_to_NFC([0.25,0.25])[1] - DC_to_NFC([0.5,0.5])[1])
for i in range(ncols):
    ax_coords = DC_to_NFC([i + 0.55, 1.9])
    try:
        val_pluie = float(pluie[i])
        if val_pluie >= 0:
            goutte_ax = fig.add_axes([ax_coords[0], ax_coords[1], gt_width, gt_height])
            goutte = Image.open("./data/goutte.png")
            goutte_ax.imshow(goutte)
            goutte_ax.axis('off')
    except ValueError:
        continue

# --- Vent ---
v_width = abs(DC_to_NFC([0.25,0.25])[0] - DC_to_NFC([0.4,0.4])[0])
v_height = abs(DC_to_NFC([0.25,0.25])[1] - DC_to_NFC([0.4,0.4])[1])
for i in range(ncols):
    try:
        vent_val = float(df.iloc[6,i].replace(" km/h",""))
        if vent_val >= 0:
            ax_coords = DC_to_NFC([i + 0.55, 0.9])
            vent_ax = fig.add_axes([ax_coords[0], ax_coords[1], v_width, v_height])
            vent_img = Image.open("./data/vent.png").rotate(-vent_val)
            vent_ax.imshow(vent_img)
            vent_ax.axis('off')
    except ValueError:
        continue

# --- Sauvegarde ---
plt.savefig('meteo.svg', dpi=300, transparent=True)
plt.close()

```

```{python}
#| echo: false
date = datetime.date.today() 
heure = datetime.datetime.now().strftime('%H:%M:%S')
print(f"Site généré le {date} à {heure}" )
```